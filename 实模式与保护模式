CPU复位（reset）或加电（power on）的时候以实模式启动，处理器以实模式工作
在实模式下，内存寻址方式和8086相同，由16位段寄存器的内容乘以16（10H）当做段基地址，加上16位偏移地址形成20位的物理地址，最大寻址空间1MB，最大分段64KB
假设我们在ES中存入0x1000，DI中存入0xFFFF,那么ES:DI=0x1000*0x10+0xFFFF=0x1FFFF,这就是众所周知的“左移4位加偏移”

计算机如果从软盘启动，计算机会检测软盘0面0磁道1扇区，如果发现它以0xAA55结束，BIOS则认为这是一个引导扇区
然后讲引导扇区的512字节加载到内存，讲系统控制权交给引导代码
当然引导扇区的汇编代码和平时写的汇编程序有本质区别，没有segment分段

为了方便我们管理段，所以我们需要从实模式跳转到保护模式，通过设置cr0寄存器可以立即转变为保护模式
在保护模式下ES:DI=ES+DI，ES为段基址，DI为偏移地址

在保护模式下，我们可以认为的定义许多段，然后将段基址等信息储存在dgt中，形成描述符表
每个描述符记录着各个段的信息，包括段基址、长度、段界限
dgt的基址、界限存储在Gdtptr寄存器中，转换为保护模式后，段之间的跳转使用选择子
选择子为一个特殊的数据结构，指向gdt中一个表项
所以在保护模式下，欲跳转到一个段，使用
     jmp 选择子：偏移地址
选择子会装载到cs，然后查找gdt表项，跳转到该段的偏移地址处

在保护模式中，更好的管理各段，以及各段的权限等
设置了选择子后，将对应的选择子装入cs、ds、es、ss
之后使用 [ds:偏移地址] 便可操作段中数据
而在实模式下却很难实现段的操作，只能使用标号来操作

实模式转换为保护模式时，运行在一个过渡段内
在该段中，需要准备GDT，修改其中的表项，用lgdt加载gdtr，打开A20，置cr0的PE位，跳转进入保护模式
为了之后从保护模式跳转出来，需要记录该段的cs值
再之后的返回代码中，标号Go_Back处，jmp 0:偏移地址
但此时的段地址为0，而不是刚开始的cs，所以在开启保护模式时，将cs的值覆盖该指令的0
mov ax , cs
mov [Go_Back+4] , ax


