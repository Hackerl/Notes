###Pac自动代理
Pac是javascript所写的自动代理脚本，基本各个浏览器都可以设置Pac脚本代理。
Pac与传统的代理不同，并不是全局代理，本机所有流量都走代理服务器。
只有当你访问某些特定的网站时，才会选择通过代理访问，这样一来，就不必每个网站都使用代理，从而影响整体网速。
####轻松跨越太平洋
Google？
facebook？
youtube？
yes!
当然单单使用一个Pac是不能翻墙的，Pac的作用仅仅是帮你决定是否应该使用代理服务器，所以你还需要一台代理服务器。
你不必要自己买VPS，搭建服务器，只需要一个软件[lantern](http://share.weiyun.com/1496a3234d374ecc491007f23347ca3a)
lantern不单单依靠某一台服务器，因为随着用户增长，任何大型服务器也会不堪重负。
lantern的厉害之处，在于共享，每一台在墙外的电脑都可以成为你的代理服务器，使用的人越多，翻墙越快。
安装好lantern后，它会在本地8787端口开一个代理服务，在16823端口存放一个Pac脚本，访问http://127.0.0.1:16823/proxy_on.pac就可以下载该脚本。
当然，我个人不是很喜欢这个脚本，因为它并不纯粹，每次访问网址，该脚本就会测试是否能访问，如果可以就不走代理服务器，如果不行就使用代理。
每次测试的时间大概1、2秒，所以我选择使用自己写的[Pac脚本](http://share.weiyun.com/273e874a1cc4f60e6b273d182607478e)，然后设定代理服务器为127.0.0.1:8787，也就是lantern开放的代理端口。
闲话不多说，开始设置，打开浏览器选项，找到网络设置
![PAC](http://chuantu.biz/t4/13/1463019462x3738746595.png)
填入本地存放Pac脚本的路径，打开lantern，你已经可以Google了
#### 浏览器的自我救赎
弹窗？
广告？
垃圾？
NO！
厌倦了网络世界的垃圾信息，你就需要一个广告拦截软件，我推荐adbyby，流量净化的佼佼者。
流量净化原理也是代理，你的网络流量走代理服务器。
代理服务器拦截流量，查询流量中疑似广告的部分，直接丢包。
至于如何查找，便涉及算法方面。
window上的adbyby似乎采用的全局代理，linux上则在8118端口开放一个代理服务器端口，与lantern一样。
所以还是使用可爱的Pac脚本，我在Pac中设置了两个服务器地址：
var proxy = "PROXY 127.0.0.1:8787";
var adbyby = "PROXY 127.0.0.1:8118";
第一个是lantern的代理地址，第二个是adbyby代理地址。
那么Pac如果选择呢？
var adby = {
  "youku.com": 1,
  "csdn.net": 1
};

var domains = {
  "share.dmhy.org": 1,
  "google": 1,
  }
  我定义了两个存放域名的集合，然后Pac可以检测你当前需要访问的网址在哪个中。
 if (hasOwnProperty.call(adby, suffix)) {
            return adbyby;
        }
if (hasOwnProperty.call(domains, suffix)) {
            return proxy;
   }
如上是Pac的核心部分，hasOwnProperty第一个参数是存放域名的列表，第二参数是当前的域名。
如果在列表中找到了当前网址，就返回代理服务器adbyby或proxy。
如不两个列表都没找到，那么就不使用代理。
另外，你可以根据喜好，往两个列表中添加域名，自己配置代理选择。


